import { IGameState } from '../types';
import { IPiece } from './entities/pieces/types';
import GameState from './GameState';
import Board from './entities/Board';
import Square from './entities/Square';
import Player from './entities/Player';
declare class Game {
    private gameData;
    private gameState;
    private gameLogic;
    private chessboard;
    private player;
    private specialMoveSquare;
    private isSquareClicked;
    private specialMoveInitiated;
    private pawnBeingMoved;
    private pieceBeingCaptured;
    private gameOver;
    constructor(player: string, fen: string, turn: string);
    setGameState(fen: string, turn: string): void;
    setPlayer(player: string, turn: string): void;
    switchPlayerForDemonstrationMode(): void;
    setCastlingStatusforDemoMode(): void;
    setKingForDemonstrationMode(): void;
    initialise(cw: number, ch: number): void;
    updateGameState(gameProps: IGameState): Square | undefined;
    updateSquareSizeProps(cw: number, ch: number): void;
    setPiecePositions(): void;
    createFenString(): string;
    setPlayerCastlingState(fen: string): "-" | undefined;
    setPlayerCanCastleKingSide(kingSide: string): void;
    setPlayerCanCastleQueenSide(kingSide: string): void;
    handleActivatedSquare(activeSquare: Square): void;
    handleDeactivatedSquare(): void;
    handleOverwriteSquare(activeSquare: Square, activePiece: IPiece): void;
    preMoveProcessing(attackedSquare: Square): void;
    postMoveProcessing(): void;
    fiftyMoveRuleDeterminant(attackedSquare: Square, activePiece: IPiece): void;
    fiftyMoveRuleProcessing(): void;
    fullMoveClockProcessing(): void;
    determinePlayerSpecialMoveCase(square: Square): void;
    initiateCastling(): void;
    initiateEnPassantCapture(): void;
    checkValidMoves(pos: string, activePiece: IPiece): void;
    checkSpecialMoves(square: Square): void;
    performEnPassantCapture(square: Square): void;
    castleRookQueenSide(square: Square): void;
    castleRookKingSide(square: Square): void;
    postMoveCalculations(): void;
    determineGameConditions(): void;
    isDemonstrationMode(): boolean;
    isMultiplayerGame(nextPlayerTurn: string): boolean;
    incrementMoveCount(piece: IPiece): void;
    removeSpecialSquare(): void;
    clearAttackedSquares(): void;
    requestedMoveIsValid(squares: Square): true | undefined;
    squareIsActive(): boolean;
    specialMoveInProgress(): boolean;
    pawnIsBeingMoved(): boolean;
    pieceIsBeingCaptured(): boolean;
    gameIsOver(): boolean;
    getNextMove(): "White" | "Black";
    getAttackedSquares(): Square[];
    getGameState(): GameState;
    getChessboard(): Board;
    getCurrentPlayer(): Player;
    getSpecialMoveSquare(): Square;
    setSpecialMoveSquare(move: Square): void;
    setSquareActive(active: boolean): void;
    setSpecialMoveInProgress(moving: boolean): void;
    setPawnIsBeingMoved(moving: boolean): void;
    setPieceIsBeingCaptured(captured: boolean): void;
    setPlayerCompletedTurn(completed: boolean): void;
    setGameOver(gameOver: boolean): void;
}
export default Game;
