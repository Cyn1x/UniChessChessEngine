import { IPiece } from './pieces/types';
import GameState from './GameState';
import Board from './Board';
import Square from './Square';
import Player from './Player';
declare class Game {
    private gameState;
    private gameLogic;
    private chessboard;
    private player;
    private specialMoveSquare;
    private isSquareClicked;
    private specialMoveInProgress;
    private pawnisBeingMoved;
    private pieceIsBeingCaptured;
    private halfmoveClock;
    private fullmoveClock;
    constructor(player: string, fen: string, turn: string);
    setPlayer(player: string, turn: string): void;
    switchPlayerForDemonstrationMode(): void;
    setCastlingStatusforDemoMode(): void;
    initialise(cw: number, ch: number): void;
    updateGameState(gameProps: any): Square | undefined;
    updateSquareSizeProps(cw: number, ch: number): void;
    setPiecePositions(): void;
    fenParser(fen: string): string[];
    fenCreator(): string;
    createFenPositions(): string;
    createFenCurrentTurn(): " w " | " b ";
    createFenCastlingStatus(): string;
    createFenEnPassantSquare(): string;
    createFenHalfmoveClock(): string;
    createFenFullmoveClock(): string;
    setPlayerCastlingState(fen: string): "-" | undefined;
    setPlayerCanCastleKingSide(kingSide: string): void;
    setPlayerCanCastleQueenSide(kingSide: string): void;
    setMoveClocks(fen: string): void;
    handleActivatedSquare(activeSquare: Square): void;
    handleDeactivatedSquare(): void;
    handleOverwriteSquare(activeSquare: Square, activePiece: IPiece): void;
    preMoveProcessing(attackedSquare: Square): void;
    fiftyMoveRuleDeterminant(attackedSquare: Square, activePiece: IPiece): void;
    fiftyMoveRuleProcessing(): void;
    fullMoveClockProcessing(): void;
    determinePlayerSpecialMoveCase(square: Square): void;
    initiateCastling(): void;
    checkSpecialMoves(square: Square): void;
    castleRookQueenSide(square: Square): void;
    castleRookKingSide(square: Square): void;
    postMoveCalculations(): void;
    incrementHalfmoveClock(): void;
    incrementFullmoveClock(): void;
    resetHalfmoveClock(): void;
    bIsDemonstrationMode(): boolean;
    bRequestedMoveIsValid(squares: Square): boolean | undefined;
    bSquareIsActive(): boolean;
    bSpecialMoveInProgress(): boolean;
    bPawnIsBeingMoved(): boolean;
    bPieceIsBeingCaptured(): boolean;
    checkValidMoves(pos: string, piece: IPiece): void;
    incrementMoveCount(piece: IPiece): void;
    clearAttackedSquares(): void;
    removeSpecialSquare(): void;
    getNextMove(): "White" | "Black";
    getAttackedSquares(): Square[];
    getGameState(): GameState;
    getChessboard(): Board;
    getCurrentPlayer(): Player;
    getSpecialMoveSquare(): Square;
    getHalfmoveClock(): number;
    getFullmoveClock(): number;
    setSpecialMoveSquare(move: Square): void;
    setSquareActive(active: boolean): void;
    setSpecialMoveInProgress(moving: boolean): void;
    setPawnIsBeingMoved(moving: boolean): void;
    setPieceIsBeingCaptured(captured: boolean): void;
    setPlayerCompletedTurn(completed: boolean): void;
}
export default Game;
