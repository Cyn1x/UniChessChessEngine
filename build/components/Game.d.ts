import { IPiece } from './pieces/types';
import GameState from './GameState';
import Board from './Board';
import Square from './Square';
import Player from './Player';
declare class Game {
    private gameState;
    private chessBoard;
    private isSquareClicked;
    private validMoves;
    private currentPlayer;
    constructor(player: string, fen: string, turn: string);
    initialise(cw: number, ch: number): void;
    updateGameState(gameProps: any): Square | undefined;
    updateSquareSizeProps(cw: number, ch: number): void;
    setPiecePositions(): void;
    fenParser(fen: string): string[];
    fenCreator(): string;
    handleActivatedSquare(activeSquare: Square): void;
    handleDeactivatedSquare(): void;
    handleOverwriteSquare(activeSquare: Square, activePiece: IPiece): void;
    checkValidMoves(pos: string, piece: IPiece): void;
    checkBounds(file: number, rank: number, piece: IPiece): boolean | undefined;
    checkRequestedMove(squares: Square): boolean;
    incrementMoveCount(piece: IPiece): void;
    getNextMove(): "White" | "Black";
    getChessboard(): Board;
    getSquareActive(): boolean;
    getValidMoves(): Square[];
    getGameState(): GameState;
    getCurrentPlayer(): Player;
    setChessboard(board: Board): void;
    setSquareActive(active: boolean): void;
    setValidMoves(valid: Array<Square>): void;
}
export default Game;
